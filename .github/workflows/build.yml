name: Build and Release

# Specify the events that trigger this workflow
on:
  # Run on pushes to specific tags
  push:
    tags:
      - 'v*'  # Push events to matching v*, i.e. v1.0, v20.15.10
  
  # Allow manual triggering from the Actions tab
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Windows",
              os: windows-latest,
              target: "x86_64-pc-windows-msvc",
              extension: "dll",
              platform_name: "windows"
            }
          - {
              name: "macOS",
              os: macos-latest,
              target: "x86_64-apple-darwin",
              extension: "dylib",
              platform_name: "macos"
            }
          - {
              name: "Linux",
              os: ubuntu-latest, # Using ubuntu-latest for newer environment
              target: "x86_64-unknown-linux-gnu",
              extension: "so",  
              platform_name: "linux"
            }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Updated to v4

      # Set up C++ environment for each platform
      - name: Set up Windows C++ environment
        if: matrix.config.platform_name == 'windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set up macOS C++ environment
        if: matrix.config.platform_name == 'macos'
        run: |
          # Xcode Command Line Tools typically provide a sufficient clang/clang++.
          # Ensure installation, '|| true' so it doesn't fail if already installed.
          xcode-select --install || true
          echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV

      - name: Set up Linux C++ environment
        if: matrix.config.platform_name == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libclang-dev

      # Install Rust with the appropriate components
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.config.target }}
          components: rustfmt, clippy

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.config.target }}

      # Removed 'Install additional Rust dependencies' step assuming bindgen is a build-dependency
      # If bindgen is used as a CLI tool directly, and not a build-dependency,
      # then uncomment and consider removing '|| true' if its installation is critical.

      # Set up any platform-specific environment variables
      - name: Set platform-specific environment
        shell: bash
        run: |
          if [ "${{ matrix.config.platform_name }}" = "windows" ]; then
            echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV
          elif [ "${{ matrix.config.platform_name }}" = "macos" ]; then
            # MACOSX_DEPLOYMENT_TARGET already set above.
            true
          elif [ "${{ matrix.config.platform_name }}" = "linux" ]; then
            # Force static linking of standard libraries (excluding glibc)
            echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV
          fi

      - name: Display build configuration
        run: |
          ls -la
          if [ -f "build.rs" ]; then
            echo "Custom build script found"
            cat build.rs
          fi
        shell: bash

      # Build release with static linking
      - name: Build release with static linking
        run: cargo build --release --target ${{ matrix.config.target }}
        env:
          RUST_BACKTRACE: 1
          # Force static linking of C/C++ dependencies
          POLARS_STATICALLY_LINK: 1
          # Use vendored SSL if OpenSSL is used
          OPENSSL_STATIC: 1
          # Use vendored versions of dependencies where possible
          CARGO_FEATURE_VENDORED: 1
          # Set CC and CXX for musl if your build script needs specific compilers
          # CC_x86_64_unknown_linux_musl: "musl-gcc"
          # CXX_x86_64_unknown_linux_musl: "musl-g++"
          # BINDGEN_EXTRA_CLANG_ARGS: "-I/usr/include" # Example if bindgen needs specific include paths

      - name: Prepare release files
        shell: bash
        run: |
          mkdir -p release_package
          
          # Copy and rename the compiled library with the correct extension
          if [ "${{ matrix.config.platform_name }}" = "windows" ]; then
            cp target/${{ matrix.config.target }}/release/stata_parquet_io.${{ matrix.config.extension }} release_package/pq.${{ matrix.config.extension }}
          elif [ "${{ matrix.config.platform_name }}" = "macos" ]; then
            cp target/${{ matrix.config.target }}/release/stata_parquet_io.${{ matrix.config.extension }} release_package/pq.${{ matrix.config.extension }}
          elif [ "${{ matrix.config.platform_name }}" = "linux" ]; then
            # For Linux builds, check both potential naming patterns (lib prefix)
            if [ -f "target/${{ matrix.config.target }}/release/libstata_parquet_io.${{ matrix.config.extension }}" ]; then
              cp target/${{ matrix.config.target }}/release/libstata_parquet_io.${{ matrix.config.extension }} release_package/pq.${{ matrix.config.extension }}
            elif [ -f "target/${{ matrix.config.target }}/release/stata_parquet_io.${{ matrix.config.extension }}" ]; then
              cp target/${{ matrix.config.target }}/release/stata_parquet_io.${{ matrix.config.extension }} release_package/pq.${{ matrix.config.extension }}
            else
              echo "Error: Could not find the expected library file."
              ls -la target/${{ matrix.config.target }}/release/ # List contents for debugging
              exit 1 # Fail the job if the library is not found
            fi
            
            # Verify shared library requirements (should be minimal for musl)
            echo "Checking GLIBC requirements of the built library:"
            objdump -p release_package/pq.${{ matrix.config.extension }} | grep GLIBC || echo "No GLIBC dependencies found (this is unexpected for gnu target)""
            # Check for GLIBC presence (expected to be absent for musl target)
            objdump -p release_package/pq.${{ matrix.config.extension }} | grep GLIBC && echo "Warning: GLIBC dependency found unexpectedly for musl target!" || echo "No GLIBC dependencies found (expected for musl target)"
          fi
          
          # Copy ADO files (will fail job if files are missing)
          cp src/ado/p/pq.ado release_package/
          cp src/ado/p/pq.pkg release_package/
          cp src/ado/p/pq.sthlp release_package/
          
          # List what we have in the release package
          echo "Files in release package:"
          ls -la release_package/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pq-${{ matrix.config.platform_name }}
          path: release_package/
          retention-days: 7

  release:
    name: Create GitHub Release
    # Only run this job if triggered by a tag push, not by workflow_dispatch
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Updated to v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: List artifacts
        run: ls -R
      
      - name: Create platform zip files
        run: |
          cd pq-windows && zip -r ../pq-windows.zip * && cd ..
          cd pq-macos && zip -r ../pq-macos.zip * && cd ..
          cd pq-linux && zip -r ../pq-linux.zip * && cd Id..
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            pq-windows.zip
            pq-macos.zip
            pq-linux.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
