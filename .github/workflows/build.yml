// This is a sample build.rs file that you might want to use
// to ensure proper compilation flags for Stata plugins

fn main() {
    // Set up platform-specific configuration
    let target_os = std::env::var("CARGO_CFG_TARGET_OS").unwrap();
    
    // Common settings for all platforms
    println!("cargo:rustc-link-lib=stdc++");

    match target_os.as_str() {
        "windows" => {
            // Windows-specific settings
            println!("cargo:rustc-env=SYSTEM=WINDOWS");
            // Tell Cargo this build script was re-run if any sources change
            println!("cargo:rerun-if-changed=src");
        },
        "macos" => {
            // macOS-specific settings
            println!("cargo:rustc-env=SYSTEM=APPLEMAC");
            // Ensure we use the bundle format but don't add -dynamiclib
            println!("cargo:rustc-link-arg=-bundle");
            // Tell rustc not to use -dynamiclib when creating .dylib files
            println!("cargo:rustc-cdylib-link-arg=-bundle");
            println!("cargo:rustc-cdylib-link-arg=-undefined");
            println!("cargo:rustc-cdylib-link-arg=dynamic_lookup");
            println!("cargo:rerun-if-changed=src");
        },
        "linux" => {
            // Linux-specific settings
            println!("cargo:rustc-env=SYSTEM=OPUNIX");
            // Ensure position-independent code
            println!("cargo:rustc-link-arg=-fPIC");
            println!("cargo:rustc-link-arg=-shared");
            println!("cargo:rerun-if-changed=src");
        },
        _ => panic!("Unsupported OS"),
    }

    // If you have additional system dependencies, you can add them here
    // For example:
    // println!("cargo:rustc-link-lib=dylib=somelib");
}
