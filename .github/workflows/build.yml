name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:  # Allow manual triggering without releasing

jobs:
  build:
    name: Build ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Windows",
              os: windows-latest,
              target: "x86_64-pc-windows-msvc",
              extension: "dll",
              platform_name: "windows"
            }
          - {
              name: "macOS",
              os: macos-latest,
              target: "x86_64-apple-darwin",
              extension: "dylib",
              platform_name: "macos"
            }
          - {
              name: "Linux",
              os: ubuntu-latest,
              target: "x86_64-unknown-linux-gnu",
              extension: "so", 
              platform_name: "linux"
            }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up C++ environment for each platform
      - name: Set up Windows C++ environment
        if: matrix.config.platform_name == 'windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set up macOS C++ environment
        if: matrix.config.platform_name == 'macos'
        run: |
          brew update
          brew install llvm
          echo "LLVM_CONFIG=$(brew --prefix llvm)/bin/llvm-config" >> $GITHUB_ENV
          echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV

      - name: Set up Linux C++ environment
        if: matrix.config.platform_name == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libclang-dev

      # Install Rust with the appropriate components
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.config.target }}
          components: rustfmt, clippy

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.config.target }}

      # Check if bindgen is needed and install it
      - name: Install additional Rust dependencies
        run: |
          cargo install bindgen-cli --version 0.69.1 || true

      # Set up any platform-specific environment variables
      - name: Set platform-specific environment
        shell: bash
        run: |
          if [ "${{ matrix.config.platform_name }}" = "windows" ]; then
            echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV
          elif [ "${{ matrix.config.platform_name }}" = "macos" ]; then
            echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV
          fi

      # Check for build.rs or need for additional setup
      - name: Display build configuration
        run: |
          ls -la
          if [ -f "build.rs" ]; then
            echo "Custom build script found"
            cat build.rs
          fi
        shell: bash

      # Check Cargo.toml for dependencies and add feature flags for static linking
      - name: Examine project dependencies for static linking
        shell: bash
        run: |
          echo "Checking dependencies in Cargo.toml..."
          cat Cargo.toml
          
          # Initialize empty feature flags variable
          echo "CARGO_FEATURE_FLAGS=" >> $GITHUB_ENV
          
      - name: Build release with static linking
        run: cargo build --release --target ${{ matrix.config.target }} ${{ env.CARGO_FEATURE_FLAGS }}
        env:
          RUST_BACKTRACE: 1
          # Force static linking of C/C++ dependencies
          POLARS_STATICALLY_LINK: 1
          # Use vendored SSL if OpenSSL is used
          OPENSSL_STATIC: 1
          # Use vendored versions of dependencies where possible
          CARGO_FEATURE_VENDORED: 1
        
      - name: Create release zip
        shell: bash
        run: |
          mkdir -p release_package
          
          # Copy the compiled library with the correct extension
          if [ "${{ matrix.config.platform_name }}" = "windows" ]; then
            cp target/${{ matrix.config.target }}/release/stata_parquet_io.${{ matrix.config.extension }} release_package/
          elif [ "${{ matrix.config.platform_name }}" = "macos" ]; then
            cp target/${{ matrix.config.target }}/release/libstata_parquet_io.${{ matrix.config.extension }} release_package/
          elif [ "${{ matrix.config.platform_name }}" = "linux" ]; then
            cp target/${{ matrix.config.target }}/release/libstata_parquet_io.${{ matrix.config.extension }} release_package/
          fi
          
          # Copy ADO files
          cp src/ado/p/pq.ado release_package/
          cp src/ado/p/pq.pkg release_package/
          cp src/ado/p/pq.sthlp release_package/
          
          # Create ZIP file
          cd release_package
          zip -r ../pq-${{ matrix.config.platform_name }}.zip *
          cd ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pq-${{ matrix.config.platform_name }}
          path: pq-${{ matrix.config.platform_name }}.zip
          retention-days: 7

  release:
    name: Create GitHub Release
    # Only run this job if triggered by a tag push, not by workflow_dispatch
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: List artifacts
        run: ls -R
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            pq-windows/pq-windows.zip
            pq-macos/pq-macos.zip
            pq-linux/pq-linux.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
